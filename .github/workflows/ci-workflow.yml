name: ci-workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      run_destroy:
        description: "Do you want to destroy the infrastructure? (Otherwise you will apply it)"
        required: false
        default: "false"
        type: boolean

jobs:
  test_fastapi:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.3"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r fastapi/requirements.txt

      - name: Run tests with coverage
        run: |
          cd fastapi
          coverage run -m pytest
          coverage report
          coverage html
        env:
          TESTING: true

  build_fastapi_image:
    runs-on: ubuntu-latest
    needs: test_fastapi
    if: success() && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Python Docker image
        run: |
          make build-fastapi
          make push-fastapi
    permissions:
      contents: read
      packages: write

  build_website_image:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push React Docker image
        run: |
          make build-website
          make push-website
    permissions:
      contents: read
      packages: write

  terraform_validate_aws:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::920373018420:role/github-action
          aws-region: eu-west-3

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Validate Terraform Configuration
        run: |
          ./terraform.sh \
            --platform aws \
            --env prd \
            --cmd validate
    permissions:
      id-token: write
      contents: read

  terraform_validate_gcp:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure gcp credentials
        uses: google-github-actions/auth@v2
        with:
          project_id: "pristine-clone-437317-u3"
          workload_identity_provider: "projects/611489444490/locations/global/workloadIdentityPools/github-wif-pool/providers/github-provider"
          service_account: github-actions@pristine-clone-437317-u3.iam.gserviceaccount.com

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Validate Terraform Configuration
        run: |
          ./terraform.sh \
            --platform gcp \
            --env prd \
            --cmd validate
    permissions:
      id-token: write
      contents: read

  terraform_tfsec:
    runs-on: ubuntu-latest
    needs: [terraform_validate_aws, terraform_validate_gcp]
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0

  terraform_plan_aws:
    if: github.event.inputs.run_destroy != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::920373018420:role/github-action
          aws-region: eu-west-3

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Plan Terraform Configuration
        run: |
          ./terraform.sh \
            --platform aws \
            --env prd \
            --cmd plan
    permissions:
      id-token: write
      contents: read

  terraform_apply_aws:
    runs-on: ubuntu-latest
    needs: [terraform_plan_aws]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_destroy != 'true'
    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::920373018420:role/github-action
          aws-region: eu-west-3

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Apply Terraform Configuration
        run: |
          ./terraform.sh \
            --platform aws \
            --env prd \
            --cmd apply \
            --auto-approve
    permissions:
      id-token: write
      contents: read

  terraform_delete_aws:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_destroy == 'true'
    steps:
      - name: Configure aws credentials
        uses: google-github-actions/auth@v2
        with:
          role-to-assume: arn:aws:iam::920373018420:role/github-action
          aws-region: eu-west-3

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.6

      - name: Destroy Terraform Configuration
        run: |
          ./terraform.sh \
            --platform aws \
            --env prd \
            --cmd destroy \
            --auto-approve
    permissions:
      id-token: write
      contents: read
